---
import { Icon } from 'astro-icon/components';
const { reviews } = Astro.props;
---

<section class="py-clamp">
  <div class="reviews-container mx-auto w-full max-w-3xl md:max-w-[80rem]">
    <button class="review-btn grid-sm review-btn--prev" id="prev" aria-label="Previous Review">
      <Icon name="tabler:chevron-left" width={50} height={50} />
    </button>
    <div class="reviews">
      {
        reviews.slice(reviews.length - 1).map((review) => (
          <div class="review grid-sm">
            <p class="review-content">{review.title}</p>
            <p class="review-content">{review.testimonial}</p>
            <p class="review-name text-gradient">{review.name}</p>
            <p class="review-name text-gradient">{review.job}</p>
          </div>
        ))
      }
      {
        reviews.map((review) => (
          <div class="review grid-sm w-[80%]">
            <q class="review-content text-base md:text-lg">{review.testimonial}</q>
            <p class="review-name text-base font-semibold md:text-xl">{review.name}</p>
            <p class="review-name w-[60%] text-base font-semibold md:text-xl">{review.job}</p>
          </div>
        ))
      }
      {
        reviews.slice(0, 1).map((review) => (
          <div class="review grid-sm">
            <p class="review-content">{review.content}</p>
            <p class="review-name text-gradient h3">{review.name}</p>
          </div>
        ))
      }
    </div>
    <div class="indicator-container">
      {reviews.map((review) => <button class={`indicator ${review?.active && 'active'}`} />)}
    </div>
    <button class="review-btn grid-sm review-btn--next" id="next" aria-label="Next Review">
      <Icon name="tabler:chevron-right" width={50} height={50} />
    </button>
  </div>
</section>

<style>
  .blur-review {
    position: relative;
  }

  .blur-review::after,
  .blur-review::before {
    content: '';
    position: absolute;
    inset: 0;
    z-index: -1;
    filter: blur(35px);
    border-radius: 50% 50% 50%;
  }

  @media screen (min-width: 768px) {
    .blur-review::after,
    .blur-review::before {
      filter: blur(120px);
    }
  }
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
  }
  .grid-sm {
    display: grid;
    place-items: center;
    gap: var(--size-fluid-1);
  }
  .container-xs {
    width: 100%;
    max-width: 900px;
    margin: auto;
  }
  .reviews-wrapper {
    background-color: #346385;
    margin: 0 calc(var(--size-fluid-2) * -1);
  }

  .reviews-wrapper::after,
  .reviews-wrapper::before {
    inset-inline: 20%;
  }

  .review-name {
    color: white;
  }

  .reviews-container {
    overflow: hidden;
    position: relative;
    width: calc(100vw - var(--size-fluid-2));
    background-color: #346385;
  }

  .reviews {
    display: flex;
    margin: var(--size-fluid-4) 0 var(--size-fluid-5);
    text-align: center;
    transform: translateX(-100%);
    transition: transform 300ms ease-in-out;
  }

  .review {
    flex: 1 0 100%;
  }

  .review-avatar {
    max-width: var(--size-fluid-5);
    border-radius: 50%;
  }

  .review-content {
    max-width: 80%;
    color: white;
  }

  .review-btn {
    position: absolute;
    z-index: 10;
    top: 0;
    bottom: 0;
    background: none;
    border: none;
    background-color: transparent;
    color: hsl(var(--muted));
    padding: var(--size-1);
    width: 4rem;
    cursor: pointer;
    transition: all 300ms var(--ease-squish-2);
  }

  .review-btn--prev {
    left: 0;
  }

  .review-btn--prev:is(:hover, :focus) {
    color: white;
  }

  .review-btn--next {
    right: 0;
  }

  .review-btn--next:is(:hover, :focus) {
    color: white;
  }

  .indicator-container {
    position: absolute;
    left: 50%;
    bottom: var(--size-5);
    display: flex;
    justify-content: center;
    gap: var(--size-3);
    transform: translateX(-50%);
  }

  .indicator {
    background: transparent;
    border: 0.15em solid hsl(var(--text-alt));
    border-radius: 50%;
    padding: 0.3rem;
    height: var(--size-fluid-1);
    cursor: pointer;
  }

  .indicator.active {
    background: hsl(var(--text-alt));
  }
</style>

<script is:inline>
  const reviewsSlider = document.querySelector('.reviews');
  const reviewBtns = document.querySelectorAll('.review-btn');
  const reviews = [...document.querySelectorAll('.review')];
  const indicators = [...document.querySelectorAll('.indicator')];
  let isMoving;
  let currentIndex = 1;

  function showActiveIndicator() {
    indicators.forEach((ind) => ind.classList.remove('active'));
    let activeIndicator;
    if (currentIndex === 0 || currentIndex === reviews.length - 2) {
      activeIndicator = indicators.length - 1;
    } else if (currentIndex === reviews.length - 1 || currentIndex === 1) {
      activeIndicator = 0;
    } else {
      activeIndicator = currentIndex - 1;
    }
    indicators[activeIndicator].classList.add('active');
  }

  function moveSlider() {
    reviewsSlider.style.transform = `translateX(-${currentIndex * 100}%)`;
    showActiveIndicator();
  }

  function handleReviewBtnClick(e) {
    if (isMoving) {
      return;
    }
    isMoving = true;
    e.currentTarget.id === 'next' ? currentIndex++ : currentIndex--;
    moveSlider();
  }

  function handleIndicatorClick(e) {
    if (isMoving) {
      return;
    }
    isMoving = true;
    currentIndex = indicators.indexOf(e.target) + 1;
    moveSlider();
  }

  // Event Listeners
  reviewBtns.forEach((btn) => {
    btn.addEventListener('click', handleReviewBtnClick);
  });

  indicators.forEach((ind) => {
    ind.addEventListener('click', handleIndicatorClick);
  });

  reviewsSlider.addEventListener('transitionend', () => {
    isMoving = false;
    if (currentIndex === 0) {
      currentIndex = reviews.length - 2;
      reviewsSlider.style.transitionDuration = '1ms';
      return moveSlider();
    }
    if (currentIndex === reviews.length - 1) {
      currentIndex = 1;
      reviewsSlider.style.transitionDuration = '1ms';
      return moveSlider();
    }
    reviewsSlider.style.transitionDuration = '300ms';
  });
</script>
